name: Publish NuGet Package Template

on:
  workflow_call:
    inputs:
      project_path:
        required: true
        type: string
      package_id:
        required: true
        type: string
      use_package_reference:
        required: false
        type: boolean
        default: false

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore ${{ inputs.project_path }}

      - name: Build and pack
        run: |
          EXTRA_ARGS=""
          if [ "${{ inputs.use_package_reference }}" = "true" ]; then
            EXTRA_ARGS="-p:UsePackageReference=true"
          fi
          dotnet pack ${{ inputs.project_path }} --configuration Release --no-restore --output ./nupkg $EXTRA_ARGS

      - name: Extract version from project file
        id: extract_version
        run: |
          VERSION=$(grep -Po '(?<=<Version>)[^<]+' ${{ inputs.project_path }})
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if package version exists
        id: check_version
        run: |
          PACKAGE_NAME="${{ inputs.package_id }}"
          PACKAGE_VERSION="${{ steps.extract_version.outputs.version }}"
          LOWER_PACKAGE_NAME=$(echo "$PACKAGE_NAME" | tr '[:upper:]' '[:lower:]')
          URL="https://api.nuget.org/v3-flatcontainer/${LOWER_PACKAGE_NAME}/${PACKAGE_VERSION}/${LOWER_PACKAGE_NAME}.nuspec"

          if curl --silent --head --fail "$URL" > /dev/null; then
              echo "✅ Package exists."
              echo "package_exists=true" >> $GITHUB_OUTPUT
          else
              echo "❌ Package does not exist."
              echo "package_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish package if version not exists
        if: steps.check_version.outputs.package_exists == 'false'
        uses: NuGet/setup-nuget@v1

      - name: Push NuGet package
        if: steps.check_version.outputs.package_exists == 'false'
        run: dotnet nuget push ./nupkg/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
